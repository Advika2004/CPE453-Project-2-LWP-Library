Contents of this directory

demos:
	This includes a few small programs that use the LWP library.
	Bear in mind that these are, in fact, fairly gentle on the
	library, but they give something to link against.

lib64:
	This includes archive versions of my LWP library and
	of the snakes library. You can use them or sub in your
	own.

	Remember, to run the demos, you'll have to include this
	directory in your LD_LIBRARY_PATH

include:
	This has the headers you'll need:
	
	fp.h:     everything you need to save the floating point state
	lwp.h:    header for the LWP library
	snakes.h: header for the snakes library



____________________________________________________________________________________________________________________
Task 1: Making the Round Robin Scheduler

Pseudocode: the scheduler will be a round robin scheduler implemented with a circular linked list
- first make a circular linked list. each node will represent each thread that is going to be scheduled
- when new threads are created, they will be added to the end of the linked list (queue) 

Structs: 

schedulerInfo struct: keeps track of the start of the circular linked list and the amount of nodes
- need this because later on I will need to know where my first thread is and how many there are total

threadinfo_st struct: was given to us, holds all the data to the thread info
- going to use that as each node in the circular linked list
- the sched_one will be the ->next field, and the sched_two will be the ->prev field 

Schedule struct: was given to us, has pointers to each function? acts like an interace? 
- I dont know what this does or means yet

Functions: 

init(): supposed to be called before any threads are put in the scheduler
- makes one of the nodes the head of the list
- keep a count of how many threads are being scheduled

admit(thread newThread): take the new thread and add it to the list
- check if there is nothing in the list already
	- that means this is the first node, so make it point to itself to keep it circular
	- update in the global struct that this is the head
- if the list is not empty, go through until you are at the end (until the next = head)
- add the new node there
- make its next point to the head and its prev is the node before it
- make the one before it's next point to it

remove(thread victim): takes a certain thread out of the list
- check if there are no threads in there and if so, return NULL
- if the thread to remove is the head and there are no other threads
	- removing it means making all the pointers point to NULL
- if the thread to remove is the head and there are more threads
	- set the tails next to be the heads next
	- set the heads next's prev to be the tail
- if the thread to remove is the tail 
	- set the tails prev nexts to be the head 
	- set the heads prev to be the tails prev 
- if the thread to remove is none of those and is somewhere in between 
	- curent nodes prev's next is next 
	- current nodes next's prev is prev

thread next(): will tell you what the next thread is
- check if there are any threads in the list, if not then return NULL
- if there are, then return the current's next
- update what the current will be

int qlen():
- just return the schedule.count

void shutdown(): need to deallocate everything 
- check if there is nothing in the list, if so, then return NULL
- start at the head and iterate through them all
	- deallocate the stuff for each node
- set all the schedulerInfo struct to be NULLs 

deallocateStuff(thread the_thread): should deallocate all the resources used by that respective thread
- spec says to use munmap to free the stack
- anything else need to be deallocated like registers? idk aobut that
____________________________________________________________________________________________________________________
Task 2: write lwp_create();

How to Go About it: 

- Allocate enough stack size using mmap 
- set up all the context
	- the registers, the stack pointers
- call admit and add the thread to the scheduler

Stacks:
- we are using mmap because that creates independent sections of memory
- we can tell if where to create that and how much to give and a bunch of permissions
- mmap returns a pointer to where that memory chunk starts
- 

Create:
- create thread ID (counter)
- allocate a stack for it (mmap will return start of chunk)
*inject into the stack, return address, old base pointer*
- create an innitial rfile
*put the wrapper address into the respective register*
- put the function argument into the respective register
- admit it into the scheduler 

QUESTIONS TO ANSWER STILL:
- what is the old base pointer? 


PIVITOL THINGS WE HAVE LEARNED:
- when the thread starts, mmap returns a pointer to the stack
- it returns a pointer to where the stack ends (the top of the stack)
- we want the stack to start at the bottom and grow downwards toward the top
- so we add the size of the stack to the pointer to move it to the bottom 
- there are 2 processes going, even if there is one thread the main is itself a thread so there are always 2
- there is only one set of 16 registers, and each process takes turns using them 
- the process has the address to the wrapper loaded into its return address just by convention
- the wrapper is necessary because the function would return a value into rdx and exit cannot access that
- we need the function to return and store that in a variable so that we can pass that to exit and it can exit
- when swap r files is called, its job is to save context into the memory we mallocked
- this means that the r file struct we created that we malloced for is somewhere in memory
- swap r files takes what is in the rip, bp2, and sp2 and stores it in the memory where you mallocked
- it keeps it there so that those registers are free to hold the data from the next thread 
- the thread that is now running upon start pops the pointer to the wrapper off and puts it into the rip
- the instruction pointer is now pointing to there, and that is what makes it run.


Start: 
- start is going to make context for the main 
- the main is a thread in itself
- it will call yeild
- it will add itself to the scheduler
- it will switch contexts and make the second process load in the wrapper
- and thats how it starts!!

Yield: 
- should call next from the scheduler to see which thread is next
- calls swap r files with the curernt thread and the next thread 


Wait: 
- takes in the 